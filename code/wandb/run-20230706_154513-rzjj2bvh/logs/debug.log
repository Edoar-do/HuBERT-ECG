2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Current SDK version is 0.15.5
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Configure stats pid to 2932
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Loading settings from /root/.config/wandb/settings
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Loading settings from /data/ECG_AF/ECG_pretraining/code/wandb/settings
2023-07-06 15:45:13,257 WARNING MainThread:2932 [wandb_setup.py:_flush():76] Unknown environment variable: WANDB_SERVICE
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Loading settings from environment variables: {'entity': 'cardi-ai', 'project': 'ECG-pretraining', 'sweep_id': 'f1pfe2ne', 'root_dir': '/data/ECG_AF/ECG_pretraining/code', 'run_id': 'rzjj2bvh', 'sweep_param_path': '/data/ECG_AF/ECG_pretraining/code/wandb/sweep-f1pfe2ne/config-rzjj2bvh.yaml'}
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': 'code/Run.py', 'program': 'Run.py'}
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_init.py:_log_setup():507] Logging user logs to /data/ECG_AF/ECG_pretraining/code/wandb/run-20230706_154513-rzjj2bvh/logs/debug.log
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_init.py:_log_setup():508] Logging internal logs to /data/ECG_AF/ECG_pretraining/code/wandb/run-20230706_154513-rzjj2bvh/logs/debug-internal.log
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_init.py:init():547] calling init triggers
2023-07-06 15:45:13,257 INFO    MainThread:2932 [wandb_init.py:init():554] wandb.init called with sweep_config: {'batch_size': 8192, 'd_model': 128, 'decoding_type': 'rev', 'dim_ff': 128, 'distributed': False, 'early_stopping': True, 'embedding_type': 'linear', 'epochs': 10, 'mask_perc': 0.3, 'n_classes': 9, 'n_encoding_layers': 2, 'n_heads': 2, 'n_leads': 12, 'num_workers': 4, 'patch_height': 2, 'patch_width': 500, 'patience': 10, 'pos_enc_type': '1d', 'reduced': True, 'warmup': 4000, 'window': 2500}
config: {'_name': 'wandb.config', '__doc__': 'Config object.\n\n    Config objects are intended to hold all of the hyperparameters associated with\n    a wandb run and are saved with the run object when `wandb.init` is called.\n\n    We recommend setting `wandb.config` once at the top of your training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\n    You can create a file called `config-defaults.yaml`, and it will automatically be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    You can also load a config YAML file with your custom name and pass the filename\n    into `wandb.init(config="special_config.yaml")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Using wandb.init to set config\n        ```\n        wandb.init(config={"epochs": 4, "batch_size": 32})\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Nested configs\n        ```\n        wandb.config[\'train\'][\'epochs\'] = 4\n        wandb.init()\n        for x in range(wandb.config[\'train\'][\'epochs\']):\n            # train\n        ```\n\n        Using absl flags\n        ```\n        flags.DEFINE_string(‘model’, None, ‘model to run’) # name, default, help\n        wandb.config.update(flags.FLAGS) # adds all absl flags to config\n        ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\n            "-b",\n            "--batch-size",\n            type=int,\n            default=8,\n            metavar="N",\n            help="input batch size for training (default: 8)",\n        )\n        args = parser.parse_args()\n        wandb.config.update(args)\n        ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n        ```python\n        flags = tf.app.flags\n        flags.DEFINE_string("data_dir", "/tmp/data")\n        flags.DEFINE_integer("batch_size", 128, "Batch size.")\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags to config\n        ```\n    '}
2023-07-06 15:45:13,258 INFO    MainThread:2932 [wandb_init.py:init():596] starting backend
2023-07-06 15:45:13,258 INFO    MainThread:2932 [wandb_init.py:init():600] setting up manager
2023-07-06 15:45:13,264 INFO    MainThread:2932 [backend.py:_multiprocessing_setup():106] multiprocessing start_methods=fork,spawn,forkserver, using: spawn
2023-07-06 15:45:13,269 INFO    MainThread:2932 [wandb_init.py:init():606] backend started and connected
2023-07-06 15:45:13,274 INFO    MainThread:2932 [wandb_run.py:_config_callback():1281] config_cb None None {'batch_size': 8192, 'd_model': 128, 'decoding_type': 'rev', 'dim_ff': 128, 'distributed': False, 'early_stopping': True, 'embedding_type': 'linear', 'epochs': 10, 'mask_perc': 0.3, 'n_classes': 9, 'n_encoding_layers': 2, 'n_heads': 2, 'n_leads': 12, 'num_workers': 4, 'patch_height': 2, 'patch_width': 500, 'patience': 10, 'pos_enc_type': '1d', 'reduced': True, 'warmup': 4000, 'window': 2500}
2023-07-06 15:45:13,275 INFO    MainThread:2932 [wandb_init.py:init():705] updated telemetry
2023-07-06 15:45:13,330 INFO    MainThread:2932 [wandb_init.py:init():738] communicating run to backend with 60.0 second timeout
2023-07-06 15:45:13,767 INFO    MainThread:2932 [wandb_run.py:_on_init():2173] communicating current version
2023-07-06 15:45:13,795 INFO    MainThread:2932 [wandb_run.py:_on_init():2182] got version response 
2023-07-06 15:45:13,795 INFO    MainThread:2932 [wandb_init.py:init():789] starting run threads in backend
2023-07-06 15:45:13,963 INFO    MainThread:2932 [wandb_run.py:_console_start():2152] atexit reg
2023-07-06 15:45:13,964 INFO    MainThread:2932 [wandb_run.py:_redirect():2007] redirect: SettingsConsole.WRAP_RAW
2023-07-06 15:45:13,964 INFO    MainThread:2932 [wandb_run.py:_redirect():2072] Wrapping output streams.
2023-07-06 15:45:13,964 INFO    MainThread:2932 [wandb_run.py:_redirect():2097] Redirects installed.
2023-07-06 15:45:13,964 INFO    MainThread:2932 [wandb_init.py:init():830] run started, returning control to user process
2023-07-06 15:45:19,493 INFO    MainThread:2932 [wandb_watch.py:watch():51] Watching
